// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.firebears;

import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.firebears.commands.*;
import org.firebears.commands.auto.routines.CenterAutoCommand;
import org.firebears.commands.auto.routines.LeftRocketAutoCommand;
import org.firebears.commands.auto.routines.RightRocketAutoCommand;
import org.firebears.subsystems.*;
import static org.firebears.util.Config.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends TimedRobot {

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Chassis chassis;
    public static Elevator elevator;
    public static HatchGrabber hatchGrabber;
    public static CargoGrabber cargoGrabber;
    public static Tilty tilty;
    public static Frogger frogger;
    public static Lights lights;
    public static Vision vision;
    public static PowerDistributionPanel powerDistributionPanel;
    public static ShuffleboardTab programmerTab; 


    private Command autonomousCommand = null;

    private static final String RIGHT_ROCKET_AUTO = "rightRocketAuto (default)";
    private static final String LEFT_ROCKET_AUTO = "leftRocketAuto";
    private static final String CENTER_AUTO = "centerAuto";
    private final SendableChooser<String> chooser = new SendableChooser<>();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be used
     * for any initialization code.
     */
    @Override
    public void robotInit() {

        cleanAllPreferences();
        loadConfiguration("/home/lvuser/deploy/config.properties", "/home/lvuser/config.properties",
                "/u/config.properties");
        printPreferences(System.out);

        programmerTab = Shuffleboard.getTab("Programmers"); 

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassis = new Chassis();
        elevator = new Elevator();
        hatchGrabber = new HatchGrabber();
        cargoGrabber = new CargoGrabber();
        tilty = new Tilty();
        frogger = new Frogger();
        lights = new Lights();
        vision = new Vision();
       

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        // (which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        chooser.setDefaultOption("rightRocketAuto (default)", RIGHT_ROCKET_AUTO);
        chooser.addOption("leftRocketAuto", LEFT_ROCKET_AUTO);
        chooser.addOption("centerAuto", CENTER_AUTO);
        SmartDashboard.putData("Auto mode", chooser);

        powerDistributionPanel = new PowerDistributionPanel();
        powerDistributionPanel.clearStickyFaults();

        lights.reset();
    }

    /**
     * This function is called when the disabled button is hit. You can use it to
     * reset subsystems before shutting down.
     */
    @Override
    public void disabledInit() {
        if (autonomousCommand != null) {
            autonomousCommand.cancel();
        }
        lights.reset();
        elevator.disable();
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        if (RIGHT_ROCKET_AUTO.equals(chooser.getSelected())) {
            autonomousCommand = new RightRocketAutoCommand();
        } else if (LEFT_ROCKET_AUTO.equals(chooser.getSelected())) {
            autonomousCommand = new LeftRocketAutoCommand();
        } else if (CENTER_AUTO.equals(chooser.getSelected())) {
            autonomousCommand = new CenterAutoCommand();
        }
        if (autonomousCommand != null) {
            autonomousCommand.start();
        }
        lights.reset();
        elevator.enable();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        if (autonomousCommand != null) {
            autonomousCommand.cancel();
        }
        lights.reset();
        elevator.enable();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
